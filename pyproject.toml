[tool.poetry]
name = "workflow-orchestrator"
version = "0.1.0"
description = "AI-native workflow orchestration system"
authors = ["Your Name <you@example.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [
    { include = "core" },
    { include = "plugins" },
    { include = "worker" },
    { include = "cli" },
]

[tool.poetry.dependencies]
python = "^3.11"
# Remove asyncio - it's built-in to Python
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
ariadne = "^0.20.0"
pydantic = "^2.4.0"
pydantic-settings = "^2.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"
asyncpg = "^0.28.0"
aiosqlite = "^0.19.0"
redis = "^5.0.0"
click = "^8.1.0"
httpx = "^0.25.0"
prometheus-client = "^0.18.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-exporter-otlp = "^1.20.0"
opentelemetry-instrumentation = "^0.55b1"
opentelemetry-instrumentation-asyncio = "^0.55b1"
opentelemetry-instrumentation-fastapi = "^0.55b1"
opentelemetry-instrumentation-httpx = "^0.55b1"
opentelemetry-instrumentation-sqlalchemy = "^0.55b1"
opentelemetry-instrumentation-redis = "^0.55b1"
opentelemetry-instrumentation-psycopg2 = "^0.55b1"
structlog = "^23.2.0"
pyyaml = "^6.0"
jinja2 = "^3.1.0"
croniter = "^2.0.0"
tenacity = "^8.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.3.0"  # For parallel test execution
black = "^23.9.0"
ruff = "^0.1.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"
coverage = "^7.3.0"

[tool.poetry.group.enterprise]
optional = true

[tool.poetry.group.enterprise.dependencies]
boto3 = "^1.28.0"
azure-cosmos = "^4.5.0"
google-cloud-storage = "^2.10.0"
authlib = "^1.2.0"
python-jose = "^3.3.0"
stripe = "^7.0.0"
datadog = "^0.47.0"
newrelic = "^9.1.0"
tensorflow = "^2.14.0"
torch = "^2.1.0"

[tool.poetry.scripts]
workflow = "cli.main:cli"
workflow-worker = "worker.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "BLE", # flake8-blind-except
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "G",  # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy-specific rules
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "SLF001", "ARG001"]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
no_implicit_optional = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_reexport = true
strict_optional = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "ariadne.*",
    "croniter.*",
    "tenacity.*",
    "prometheus_client.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "requires_redis: marks tests that require Redis",
    "requires_db: marks tests that require database",
    "requires_external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"